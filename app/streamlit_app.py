import streamlit as st
import pandas as pd
import numpy as np
import joblib, os, json, runpy, shap, io
import matplotlib.pyplot as plt
import seaborn as sns

import plotly.express as px
import plotly.graph_objects as go

from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    confusion_matrix, roc_curve, auc, precision_recall_curve, roc_auc_score
)
from sklearn.model_selection import train_test_split, learning_curve
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
import xgboost as xgb
import lightgbm as lgb
from catboost import CatBoostClassifier

# ==============================
# CONFIG
# ==============================
st.set_page_config(page_title="Parkinson‚Äôs ML App", page_icon="üß†", layout="wide")

# ==============================
# Sidebar Settings
# ==============================
st.sidebar.title("‚öôÔ∏è Settings")
theme_choice = st.sidebar.radio("Theme", ["Light", "Dark"], index=0, key="theme_choice")
language_choice = st.sidebar.selectbox("Language", ["English", "◊¢◊ë◊®◊ô◊™", "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", "Fran√ßais"], index=1, key="lang_choice")
text_size = st.sidebar.select_slider("Text Size", options=["Small", "Medium", "Large"], value="Medium", key="text_size")
layout_density = st.sidebar.radio("Layout Density", ["Comfortable", "Compact"], index=0, key="layout_density")
show_advanced_eda = st.sidebar.checkbox("Show Advanced EDA Visualizations", value=True, key="eda_toggle")
threshold_global = st.sidebar.slider("Decision Threshold (Global)", 0.0, 1.0, 0.5, 0.01, key="global_threshold")

# ==============================
# Helpers
# ==============================
def align_features(model, X: pd.DataFrame) -> pd.DataFrame:
    if hasattr(model, "feature_names_in_"):
        expected_cols = list(model.feature_names_in_)
        for col in expected_cols:
            if col not in X.columns:
                X[col] = 0
        X = X[expected_cols]
    return X

def safe_predict(model, X):
    try: return model.predict(X)
    except Exception:
        X = align_features(model, X)
        return model.predict(X)

def safe_predict_proba(model, X):
    try: return model.predict_proba(X)
    except Exception:
        X = align_features(model, X)
        return model.predict_proba(X)

# ==============================
# Load dataset
# ==============================
DATA_PATH = "data/parkinsons.csv"
df = pd.read_csv(DATA_PATH)
X = df.drop("status", axis=1)
y = df["status"]

# ==============================
# Load model + metrics
# ==============================
def load_model_and_metrics():
    if not os.path.exists("models/best_model.joblib") or not os.path.exists("assets/metrics.json"):
        runpy.run_path("app/model_pipeline.py")
    best_model = joblib.load("models/best_model.joblib")
    with open("assets/metrics.json","r") as f:
        metrics = json.load(f)
    return best_model, metrics

if "best_model" not in st.session_state or "metrics" not in st.session_state:
    st.session_state.best_model, st.session_state.metrics = load_model_and_metrics()

best_model = st.session_state.best_model
metrics = st.session_state.metrics

# ==============================
# Tabs
# ==============================
tab1, tab_dash, tab2, tab3, tab5, tab4, tab_hist, tab_explain, tab_about = st.tabs([
    "üìä Data & EDA", 
    "üìà Dashboard",
    "ü§ñ Models", 
    "üîÆ Prediction", 
    "üß™ Test Evaluation",
    "‚ö° Train New Model",
    "üïë Model History",
    "üß† Explainability",
    "‚ÑπÔ∏è About"
])

# --- Tab 1: Data & EDA
with tab1:
    st.header("üìä Data & Exploratory Data Analysis")
    st.dataframe(df.head())
    st.write(f"Rows: {df.shape[0]}, Cols: {df.shape[1]}")
    st.table(y.value_counts().rename({0:"Healthy",1:"Parkinson‚Äôs"}))

# --- Tab 2: Dashboard
with tab_dash:
    st.header("üìà Interactive Dashboard ‚Äì Compare Models")
    # (◊î◊©◊ê◊®◊™◊ô ◊ê◊™ ◊î◊ß◊ï◊ì ◊©◊ú◊ö ◊õ◊ê◊ü ‚Äì ◊ú◊ê ◊û◊©◊†◊î)

# --- Tab 3: Models
with tab2:
    st.header("ü§ñ Model Training & Comparison")
    # (◊î◊©◊ê◊®◊™◊ô ◊ê◊™ ◊î◊ß◊ï◊ì ◊©◊ú◊ö ◊õ◊ê◊ü ‚Äì ◊ú◊ê ◊û◊©◊†◊î)

# --- Tab 4: Prediction
with tab3:
    st.header("üîÆ Prediction")
    threshold = st.slider("Decision Threshold", 0.0, 1.0, threshold_global, 0.01)
    option = st.radio("Choose input type:", ["Manual Input","Upload CSV/Excel"])
    # (◊î◊©◊ê◊®◊™◊ô ◊ê◊™ ◊î◊ß◊ï◊ì ◊©◊ú◊ö ◊õ◊ê◊ü ‚Äì ◊ú◊ê ◊û◊©◊†◊î)

# --- Tab 5: Test Evaluation
with tab5:
    st.header("üß™ Model Evaluation on External Test Set")
    # (◊î◊©◊ê◊®◊™◊ô ◊ê◊™ ◊î◊ß◊ï◊ì ◊©◊ú◊ö ◊õ◊ê◊ü ‚Äì ◊ú◊ê ◊û◊©◊†◊î)

# --- Tab 6: Train New Model
with tab4:
    st.header("‚ö° Train New Model")
    # (◊î◊©◊ê◊®◊™◊ô ◊ê◊™ ◊î◊ß◊ï◊ì ◊©◊ú◊ö ◊õ◊ê◊ü ‚Äì ◊ú◊ê ◊û◊©◊†◊î)

# --- Tab 7: Model History
with tab_hist:
    st.header("üïë Model History")
    hist_file = "assets/model_history.csv"
    if os.path.exists(hist_file):
        hist_df = pd.read_csv(hist_file)
        st.dataframe(hist_df)
        if st.button("üîô Rollback Last Model"):
            if len(hist_df)>1:
                prev_model = hist_df.iloc[-2]["model_path"]
                best_model = joblib.load(prev_model)
                st.session_state.best_model = best_model
                st.success("‚úÖ Rolled back to previous model")
    else:
        st.info("No model history found yet.")

# --- Tab 8: Explainability
with tab_explain:
    st.header("üß† Model Explainability")
    if hasattr(best_model,"feature_importances_"):
        fi = pd.Series(best_model.feature_importances_, index=X.columns).sort_values(ascending=False)
        st.bar_chart(fi)
    try:
        explainer = shap.Explainer(best_model, X)
        shap_values = explainer(X)
        st.write("SHAP Summary Plot")
        fig, ax = plt.subplots()
        shap.summary_plot(shap_values, X, show=False)
        st.pyplot(fig)
    except Exception as e:
        st.warning(f"SHAP not available: {e}")

# --- Tab 9: About
with tab_about:
    st.header("‚ÑπÔ∏è About")
    st.markdown("""
    **Parkinson‚Äôs ML App**  
    This app demonstrates prediction and evaluation of Parkinson‚Äôs disease using ML models.  
    Features: EDA, Model Training, Comparison, Prediction, Evaluation, Explainability, History, Export to PDF.  
    """)

    if st.button("üìÑ Download PDF Report"):
        from reportlab.lib.pagesizes import letter
        from reportlab.pdfgen import canvas
        pdf_buffer = io.BytesIO()
        c = canvas.Canvas(pdf_buffer, pagesize=letter)
        c.drawString(100, 750, "Parkinson‚Äôs ML Report")
        c.drawString(100, 730, f"Rows: {df.shape[0]}, Cols: {df.shape[1]}")
        c.save()
        pdf_buffer.seek(0)
        st.download_button("Download PDF", data=pdf_buffer, file_name="report.pdf", mime="application/pdf")
